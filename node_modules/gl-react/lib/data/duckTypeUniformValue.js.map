{"version":3,"sources":["../../src/data/duckTypeUniformValue.js"],"names":["React","require","isAnimated","duckTypeUniformValue","obj","typ","isNaN","isFinite","Error","uri","data","shape","stride","Array","length","foundAnimated","foundVDOM","foundNumber","foundBoolean","i","val","t","isValidElement","foundNumberOrBooleanOrAnimated","module","exports"],"mappings":"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","file":"duckTypeUniformValue.js","sourcesContent":["const React = require(\"react\");\nconst isAnimated = require(\"../isAnimated\");\n\n// infer the uniform value type and validate it (throw error if invalid)\n\nfunction duckTypeUniformValue (obj) {\n  let typ = typeof obj;\n\n  if (typ===\"number\") {\n    if(isNaN(obj) || !isFinite(obj)) throw new Error(\"invalid number: '\"+obj+\"'\");\n    return typ;\n  }\n\n  if (typ===\"boolean\") {\n    return typ;\n  }\n\n  if (typ===\"string\") {\n    return typ;\n  }\n\n  if (typ===\"undefined\") {\n    return null;\n  }\n\n  if (typ === \"object\") {\n\n    if (!obj) {\n      return null;\n    }\n\n    if (typeof obj.uri === \"string\") {\n      return \"{uri}\";\n    }\n\n    if (obj.data && obj.shape && obj.stride) {\n      return \"ndarray\";\n    }\n\n    if (obj instanceof Array) {\n      const length = obj.length;\n      if (!length) throw new Error(\"array is empty\");\n      let foundAnimated = false;\n      let foundVDOM = false;\n      let foundNumber = false;\n      let foundBoolean = false;\n      for (let i=0; i<length; i++) {\n        const val = obj[i];\n        const t = typeof val;\n        switch (t) {\n        case \"object\":\n          if (val && isAnimated(val))\n            foundAnimated = true;\n          else if (val && React.isValidElement(val))\n            foundVDOM = true;\n          else if (val instanceof Array)\n            return duckTypeUniformValue(val);\n          else\n            throw new Error(\"at index \"+i+\", Unrecognized object: '\"+val+\"'\");\n          break;\n\n        case \"number\":\n          if(isNaN(val) || !isFinite(val))\n            throw new Error(\"at index \"+i+\", invalid number: '\"+val+\"'\");\n          foundNumber = true;\n          break;\n\n        case \"boolean\":\n          foundBoolean = true;\n          break;\n\n        default:\n          throw new Error(\"at index \"+i+\", Unrecognized object: \"+val);\n        }\n      }\n\n      const foundNumberOrBooleanOrAnimated = foundNumber || foundBoolean || foundAnimated;\n      if (foundNumberOrBooleanOrAnimated && foundVDOM) {\n        throw new Error(\"Invalid array. Found both VDOM value and numbers/booleans/animated\");\n      }\n\n      if (foundVDOM) {\n        return \"vdom[]\";\n      }\n      if (foundAnimated) {\n        return \"animated[]\";\n      }\n      if (foundNumber) {\n        return \"number[]\";\n      }\n      if (foundBoolean) {\n        return \"boolean[]\";\n      }\n    }\n\n    if (isAnimated(obj)) {\n      return \"animated\";\n    }\n\n    if (React.isValidElement(obj)) {\n      return \"vdom\";\n    }\n  }\n\n  throw new Error(\"Unrecognized object: \"+obj);\n}\n\nmodule.exports = duckTypeUniformValue;\n"]}