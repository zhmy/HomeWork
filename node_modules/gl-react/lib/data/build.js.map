{"version":3,"sources":["../../src/data/build.js"],"names":["React","require","invariant","Uniform","Shaders","TextureObjects","duckTypeUniformValue","findGLNodeInGLComponentChildren","invariantStrictPositive","module","exports","build","glNode","context","parentPreload","via","surfaceId","decorateOnShaderCompile","props","shader","_resolve","onShaderCompile","glNodeUniforms","uniforms","width","height","pixelRatio","newContext","glNodeChildren","children","preload","exists","shaderName","get","name","contents","Children","forEach","child","type","displayName","opts","value","Object","keys","prototype","decorateUniformValue","withOpts","URI","uri","NDArray","res","childGLNode","push","vdom","uniform","data","e","message","process","env","NODE_ENV","console","error","Error"],"mappings":"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","file":"build.js","sourcesContent":["const React = require(\"react\");\nconst invariant = require(\"invariant\");\nconst Uniform = require(\"../Uniform\");\nconst Shaders = require(\"../Shaders\");\nconst TextureObjects = require(\"./TextureObjects\");\nconst duckTypeUniformValue = require(\"./duckTypeUniformValue\");\nconst findGLNodeInGLComponentChildren = require(\"./findGLNodeInGLComponentChildren\");\nconst invariantStrictPositive = require(\"./invariantStrictPositive\");\nimport runtime from \"../runtime\";\n\n//// build: converts the gl-react VDOM DSL into an internal data tree.\n\nmodule.exports = function build (\n  glNode,\n  context,\n  parentPreload,\n  via,\n  surfaceId,\n  decorateOnShaderCompile\n) {\n  const props = glNode.props;\n  const shader = Shaders._resolve(props.shader, surfaceId, decorateOnShaderCompile(props.onShaderCompile));\n  const glNodeUniforms = props.uniforms;\n  const {\n    width,\n    height,\n    pixelRatio\n  } = { ...context, ...props };\n  const newContext = {\n    width,\n    height,\n    pixelRatio\n  };\n  const glNodeChildren = props.children;\n  const preload = \"preload\" in props ? props.preload : parentPreload;\n\n  invariant(Shaders.exists(shader), \"Shader #%s does not exists\", shader);\n\n  const shaderName = Shaders.get(shader).name;\n  invariantStrictPositive(pixelRatio, \"GL Component (\"+shaderName+\"). pixelRatio prop\");\n\n  const uniforms = { ...glNodeUniforms };\n  const children = [];\n  const contents = [];\n\n  React.Children.forEach(glNodeChildren, child => {\n    invariant(child.type === Uniform, \"(Shader '%s') GL.Node can only contains children of type GL.Uniform. Got '%s'\", shaderName, child.type && child.type.displayName || child);\n    const { name, children, ...opts } = child.props;\n    invariant(typeof name === \"string\" && name, \"(Shader '%s') GL.Uniform must define an name String\", shaderName);\n    invariant(!glNodeUniforms || !(name in glNodeUniforms), \"(Shader '%s') The uniform '%s' set by GL.Uniform must not be in {uniforms} props\", shaderName);\n    invariant(!(name in uniforms), \"(Shader '%s') The uniform '%s' set by GL.Uniform must not be defined in another GL.Uniform\", shaderName);\n    uniforms[name] = !children || children.value ? children : { value: children, opts }; // eslint-disable-line no-undef\n  });\n\n  Object.keys(uniforms).forEach(name => {\n    let value = uniforms[name], opts;\n    if (value && typeof value === \"object\" && !value.prototype && \"value\" in value) {\n      // if value has a value field, we tread this field as the value, but keep opts in memory if provided\n      if (typeof value.opts === \"object\") {\n        opts = value.opts;\n      }\n      value = value.value;\n    }\n\n    value = runtime.decorateUniformValue(value);\n\n    try {\n      switch (duckTypeUniformValue(value)) {\n\n      case \"string\": // uri specified as a string\n        uniforms[name] = TextureObjects.withOpts(TextureObjects.URI({ uri: value }), opts);\n        break;\n\n      case \"{uri}\": // uri specified in an object, we keep all other fields for RN \"local\" image use-case\n        uniforms[name] = TextureObjects.withOpts(TextureObjects.URI(value), opts);\n        break;\n\n      case \"ndarray\":\n        uniforms[name] = TextureObjects.withOpts(TextureObjects.NDArray(value), opts);\n        break;\n\n      case \"vdom[]\":\n      case \"vdom\": {\n        const res = findGLNodeInGLComponentChildren(value, newContext);\n        if (res) {\n          const { childGLNode, via, context } = res;\n          // We have found a GL.Node children, we integrate it in the tree and recursively do the same\n          children.push({\n            vdom: value,\n            uniform: name,\n            data: build(childGLNode, context, preload, via, surfaceId, decorateOnShaderCompile)\n          });\n        }\n        else {\n          // in other cases VDOM, we will use child as a content\n          contents.push({\n            vdom: value,\n            uniform: name,\n            opts\n          });\n        }\n        break;\n      }\n\n      default:\n        // Remaining cases will just set the value without further transformation\n        uniforms[name] = value;\n      }\n    }\n    catch (e) {\n      delete uniforms[name];\n      const message = \"Shader '\"+shaderName+\"': uniform '\"+name+\"' \"+e.message;\n      if (process.env.NODE_ENV !== \"production\")\n        console.error(message, value); // eslint-disable-line no-console\n      throw new Error(message);\n    }\n  });\n\n  return {\n    shader,\n    uniforms,\n    width,\n    height,\n    pixelRatio,\n    children,\n    contents,\n    preload,\n    via\n  };\n};\n"]}